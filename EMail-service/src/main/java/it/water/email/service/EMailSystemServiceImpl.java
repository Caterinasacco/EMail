package it.water.email.service;

import freemarker.cache.StringTemplateLoader;
import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;
import it.water.core.api.interceptors.OnActivate;
import it.water.core.api.model.PaginableResult;
import it.water.core.api.notification.email.EmailContentBuilder;
import it.water.core.api.notification.email.EmailNotificationService;
import it.water.core.interceptors.annotations.FrameworkComponent;
import it.water.core.interceptors.annotations.Inject;
import it.water.core.model.exceptions.WaterRuntimeException;
import it.water.email.api.EMailOptions;
import it.water.email.api.EMailTemplateRepository;
import it.water.email.api.EMailTemplateSystemApi;
import it.water.email.model.EMailTemplate;
import it.water.repository.entity.model.exceptions.NoResultException;
import it.water.repository.service.BaseEntitySystemServiceImpl;
import jakarta.mail.*;
import jakarta.mail.internet.*;
import lombok.Getter;
import lombok.Setter;

import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.*;


/**
 * @Generated by Water Generator
 * System Service Api Class for EMail entity.
 */
@FrameworkComponent(services = {EMailTemplateSystemApi.class, EmailContentBuilder.class, EmailNotificationService.class})
public class EMailSystemServiceImpl extends BaseEntitySystemServiceImpl<EMailTemplate> implements EMailTemplateSystemApi, EmailContentBuilder, EmailNotificationService {
    @Inject
    @Getter
    @Setter
    private EMailTemplateRepository repository;

    @Inject
    @Setter
    private EMailOptions eMailOptions;

    /**
     * Mail Template engine
     */
    private Configuration freemarkerConf;


    public EMailSystemServiceImpl() {
        super(EMailTemplate.class);
    }

    /**
     * On activation time, the system will setup freemarker configuration
     */
    @OnActivate
    public void activate() {
        freemarkerConf = new Configuration(Configuration.VERSION_2_3_28);
        freemarkerConf.setDefaultEncoding("ISO-8859-1");
        freemarkerConf.setLocale(Locale.US);
        freemarkerConf.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        reloadCustomTemplates();
    }

    /**
     * Loads all templates in the template loader
     */
    private void reloadCustomTemplates() {
        StringTemplateLoader templateLoader = new StringTemplateLoader();
        PaginableResult<EMailTemplate> templates = findAll(null, -1, 1, null);
        for (EMailTemplate t : templates.getResults()) {
            templateLoader.putTemplate(t.getTemplateName(), t.getContent());
        }
        freemarkerConf.setTemplateLoader(templateLoader);
    }

    /**
     * Creates the template text given the template name and params
     *
     * @param templateText
     * @param params
     * @return
     */
    @Override
    public String createBodyFromTemplate(String templateText, HashMap<String, Object> params) {
        final String templateName = "custom";
        StringTemplateLoader stringLoader = new StringTemplateLoader();
        stringLoader.putTemplate(templateName, templateText);

        Configuration cfg = new Configuration(Configuration.VERSION_2_3_23);
        cfg.setTemplateLoader(stringLoader);
        cfg.setDefaultEncoding("UTF-8");
        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);

        Template template = null;
        try {
            template = cfg.getTemplate(templateName);
        } catch (IOException e) {
            e.printStackTrace();
        }

        Writer stringWriter = new StringWriter();
        if (template != null) {
            try {
                template.process(params, stringWriter);
            } catch (TemplateException | IOException e) {
                getLog().error(e.getMessage(), e);
                throw new WaterRuntimeException(e.getMessage());
            } finally {
                try {
                    stringWriter.close();
                } catch (Exception e) {
                    getLog().error(e.getMessage(), e);
                }
            }
        }
        return stringWriter.toString();
    }

    @Override
    public void saveOrUpdateTemplate(String templateName, String templateContent) {
        EMailTemplate em = null;
        try {
            em = repository.findByName(templateName);
            repository.update(em);
        } catch (NoResultException e) {
            em = new EMailTemplate(templateName, "", templateContent);
            repository.persist(em);
        }
    }

    /**
     * System sender name
     *
     * @return
     */
    @Override
    public String getSystemSenderName() {
        return eMailOptions.systemSenderName();
    }

    /**
     * Method for sending email when the content is ready.
     *
     * @param from
     * @param recipients
     * @param ccRecipients
     * @param bccRecipients
     * @param subject
     * @param content
     * @param attachments
     */
    @Override
    public void sendMail(String from, List<String> recipients, List<String> ccRecipients, List<String> bccRecipients, String subject, String content, List<File> attachments) {
        try {
            Message m = this.createMimeMessage(from, recipients, ccRecipients, bccRecipients, subject, content, attachments);
            sendMail(m);
        } catch (MessagingException e) {
            getLog().error(e.getMessage(), e);
            throw new WaterRuntimeException("Error while sending email", e);
        }
    }

    /**
     * Method to send an email following a template
     *
     * @param templateName
     * @param params
     * @param from
     * @param recipients
     * @param ccRecipients
     * @param bccRecipients
     * @param subject
     * @param attachments
     */
    @Override
    public void sendMail(String templateName, HashMap<String, Object> params, String from, List<String> recipients, List<String> ccRecipients, List<String> bccRecipients, String subject, List<File> attachments) {
        if (templateName == null || templateName.isBlank())
            throw new IllegalArgumentException("Template name cannot be null");
        EMailTemplate template = repository.findByName(templateName);
        if (template != null) {
            String content = createBodyFromTemplate(template.getContent(), params);
            this.sendMail(from, recipients, ccRecipients, bccRecipients, subject, content, attachments);
        }
    }

    /**
     * Setups the connection to the SMTP server
     *
     * @return
     */
    private Session getMailSession() {
        // creates a new session with an authenticator
        String username = eMailOptions.smtpUsername();
        String password = eMailOptions.smtpPassword();
        Authenticator auth = new Authenticator() {
            @Override
            public PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        };
        Properties props = new Properties();
        props.put("mail.smtp.host", eMailOptions.smtpHostname());
        props.put("mail.smtp.port", eMailOptions.smtpPort());
        props.put("mail.smtp.auth", eMailOptions.isSmtpAuthEnabled());
        props.put("mail.smtp.starttls.enable", eMailOptions.isSmtpAuthEnabled());
        return Session.getInstance(props, auth);
    }

    private void sendMail(Message message) throws MessagingException {
        Transport.send(message);
    }

    /**
     * Creating the MIME message based on received parameters
     *
     * @param from
     * @param toAddressesList
     * @param ccAddressesList
     * @param bccAddressesList
     * @param subject
     * @param content
     * @param attachFiles
     * @return
     * @throws MessagingException
     */
    private Message createMimeMessage(String from, List<String> toAddressesList, List<String> ccAddressesList, List<String> bccAddressesList, String subject, String content, List<File> attachFiles) throws MessagingException {
        Message msg = new MimeMessage(this.getMailSession());

        msg.setFrom(new InternetAddress(from));
        InternetAddress[] toAddresses = new InternetAddress[toAddressesList.size()];
        toAddressesList.stream()
                .map(this::constructInetAddress)
                .toList()
                .toArray(toAddresses);
        msg.setRecipients(Message.RecipientType.TO, toAddresses);

        if (ccAddressesList != null) {
            InternetAddress[] ccAddresses = new InternetAddress[ccAddressesList.size()];
            ccAddressesList.stream()
                    .map(this::constructInetAddress)
                    .toList()
                    .toArray(ccAddresses);
            msg.setRecipients(Message.RecipientType.CC, ccAddresses);
        }

        if (bccAddressesList != null) {
            InternetAddress[] bccAddresses = new InternetAddress[bccAddressesList.size()];
            bccAddressesList.stream()
                    .map(this::constructInetAddress)
                    .toList().toArray(bccAddresses);
            msg.setRecipients(Message.RecipientType.BCC, bccAddresses);
        }

        msg.setSubject(subject);
        msg.setSentDate(new Date());

        // creates message part
        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setContent(content, "text/html");

        // creates multi-part
        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(messageBodyPart);

        // adds attachments
        if (attachFiles != null && !attachFiles.isEmpty()) {
            for (File file : attachFiles) {
                MimeBodyPart attachPart = new MimeBodyPart();
                try {
                    attachPart.attachFile(file);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                multipart.addBodyPart(attachPart);
            }
        }
        // sets the multi-part as e-mail's content
        msg.setContent(multipart);
        return msg;
    }

    private InternetAddress constructInetAddress(String address) {
        try {
            return new InternetAddress(address);
        } catch (AddressException e) {
            throw new WaterRuntimeException(e);
        }
    }
}